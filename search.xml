<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2024/10/02/hello-world/"/>
      <url>/blog/2024/10/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/blog/2024/10/02/git-chang-yong-ming-ling/"/>
      <url>/blog/2024/10/02/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>一些git命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init                                                  <span class="token comment" spellcheck="true"># 初始化本地git仓库（创建新仓库）</span><span class="token function">git</span> config --global user.name <span class="token string">"xxx"</span>                       <span class="token comment" spellcheck="true"># 配置用户名</span><span class="token function">git</span> config --global user.email <span class="token string">"xxx@xxx.com"</span>              <span class="token comment" spellcheck="true"># 配置邮件</span><span class="token function">git</span> config --global color.ui <span class="token boolean">true</span>                         <span class="token comment" spellcheck="true"># git status等命令自动着色</span><span class="token function">git</span> config --global color.status auto<span class="token function">git</span> config --global color.diff auto<span class="token function">git</span> config --global color.branch auto<span class="token function">git</span> config --global color.interactive auto<span class="token function">git</span> config --global --unset http.proxy                    <span class="token comment" spellcheck="true"># remove  proxy configuration on git</span><span class="token function">git</span> clone git+ssh://git@192.168.53.168/VT.git             <span class="token comment" spellcheck="true"># clone远程仓库</span><span class="token function">git</span> status                                                <span class="token comment" spellcheck="true"># 查看当前版本状态（是否修改）</span><span class="token function">git</span> add xyz                                               <span class="token comment" spellcheck="true"># 添加xyz文件至index</span><span class="token function">git</span> add <span class="token keyword">.</span>                                                 <span class="token comment" spellcheck="true"># 增加当前子目录下所有更改过的文件至index</span><span class="token function">git</span> commit -m <span class="token string">'xxx'</span>                                       <span class="token comment" spellcheck="true"># 提交</span><span class="token function">git</span> commit --amend -m <span class="token string">'xxx'</span>                               <span class="token comment" spellcheck="true"># 合并上一次提交（用于反复修改）</span><span class="token function">git</span> commit -am <span class="token string">'xxx'</span>                                      <span class="token comment" spellcheck="true"># 将add和commit合为一步</span><span class="token function">git</span> <span class="token function">rm</span> xxx                                                <span class="token comment" spellcheck="true"># 删除index中的文件</span><span class="token function">git</span> <span class="token function">rm</span> -r *                                               <span class="token comment" spellcheck="true"># 递归删除</span><span class="token function">git</span> log                                                   <span class="token comment" spellcheck="true"># 显示提交日志</span><span class="token function">git</span> log -1                                                <span class="token comment" spellcheck="true"># 显示1行日志 -n为n行</span><span class="token function">git</span> log -5<span class="token function">git</span> log --stat                                            <span class="token comment" spellcheck="true"># 显示提交日志及相关变动文件</span><span class="token function">git</span> log -p -m<span class="token function">git</span> show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class="token comment" spellcheck="true"># 显示某个提交的详细内容</span><span class="token function">git</span> show dfb02                                            <span class="token comment" spellcheck="true"># 可只用commitid的前几位</span><span class="token function">git</span> show HEAD                                             <span class="token comment" spellcheck="true"># 显示HEAD提交日志</span><span class="token function">git</span> show HEAD^                                            <span class="token comment" spellcheck="true"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><span class="token function">git</span> tag                                                   <span class="token comment" spellcheck="true"># 显示已存在的tag</span><span class="token function">git</span> tag -a v2.0 -m <span class="token string">'xxx'</span>                                  <span class="token comment" spellcheck="true"># 增加v2.0的tag</span><span class="token function">git</span> show v2.0                                             <span class="token comment" spellcheck="true"># 显示v2.0的日志及详细内容</span><span class="token function">git</span> log v2.0                                              <span class="token comment" spellcheck="true"># 显示v2.0的日志</span><span class="token function">git</span> <span class="token function">diff</span>                                                  <span class="token comment" spellcheck="true"># 显示所有未添加至index的变更</span><span class="token function">git</span> <span class="token function">diff</span> --cached                                         <span class="token comment" spellcheck="true"># 显示所有已添加index但还未commit的变更</span><span class="token function">git</span> <span class="token function">diff</span> HEAD^                                            <span class="token comment" spellcheck="true"># 比较与上一个版本的差异</span><span class="token function">git</span> <span class="token function">diff</span> HEAD -- ./lib                                    <span class="token comment" spellcheck="true"># 比较与HEAD版本lib目录的差异</span><span class="token function">git</span> <span class="token function">diff</span> origin/master<span class="token punctuation">..</span>master                            <span class="token comment" spellcheck="true"># 比较远程分支master上有本地分支master上没有的</span><span class="token function">git</span> <span class="token function">diff</span> origin/master<span class="token punctuation">..</span>master --stat                     <span class="token comment" spellcheck="true"># 只显示差异的文件，不显示具体内容</span><span class="token function">git</span> remote add origin git+ssh://git@192.168.53.168/VT.git <span class="token comment" spellcheck="true"># 增加远程定义（用于push/pull/fetch）</span><span class="token function">git</span> branch                                                <span class="token comment" spellcheck="true"># 显示本地分支</span><span class="token function">git</span> branch --contains 50089                               <span class="token comment" spellcheck="true"># 显示包含提交50089的分支</span><span class="token function">git</span> branch -a                                             <span class="token comment" spellcheck="true"># 显示所有分支</span><span class="token function">git</span> branch -r                                             <span class="token comment" spellcheck="true"># 显示所有原创分支</span><span class="token function">git</span> branch --merged                                       <span class="token comment" spellcheck="true"># 显示所有已合并到当前分支的分支</span><span class="token function">git</span> branch --no-merged                                    <span class="token comment" spellcheck="true"># 显示所有未合并到当前分支的分支</span><span class="token function">git</span> branch -m master master_copy                          <span class="token comment" spellcheck="true"># 本地分支改名</span><span class="token function">git</span> checkout -b master_copy                               <span class="token comment" spellcheck="true"># 从当前分支创建新分支master_copy并检出</span><span class="token function">git</span> checkout -b master master_copy                        <span class="token comment" spellcheck="true"># 上面的完整版</span><span class="token function">git</span> checkout features/performance                         <span class="token comment" spellcheck="true"># 检出已存在的features/performance分支</span><span class="token function">git</span> checkout --track hotfixes/BJVEP933                    <span class="token comment" spellcheck="true"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><span class="token function">git</span> checkout v2.0                                         <span class="token comment" spellcheck="true"># 检出版本v2.0</span><span class="token function">git</span> checkout -b devel origin/develop                      <span class="token comment" spellcheck="true"># 从远程分支develop创建新本地分支devel并检出</span><span class="token function">git</span> checkout -- README                                    <span class="token comment" spellcheck="true"># 检出head版本的README文件（可用于修改错误回退）</span><span class="token function">git</span> merge origin/master                                   <span class="token comment" spellcheck="true"># 合并远程master分支至当前分支</span><span class="token function">git</span> cherry-pick ff44785404a8e                             <span class="token comment" spellcheck="true"># 合并提交ff44785404a8e的修改</span><span class="token function">git</span> push origin master                                    <span class="token comment" spellcheck="true"># 将当前分支push到远程master分支</span><span class="token function">git</span> push origin :hotfixes/BJVEP933                        <span class="token comment" spellcheck="true"># 删除远程仓库的hotfixes/BJVEP933分支</span><span class="token function">git</span> push --tags                                           <span class="token comment" spellcheck="true"># 把所有tag推送到远程仓库</span><span class="token function">git</span> fetch                                                 <span class="token comment" spellcheck="true"># 获取所有远程分支（不更新本地分支，另需merge）</span><span class="token function">git</span> fetch --prune                                         <span class="token comment" spellcheck="true"># 获取所有原创分支并清除服务器上已删掉的分支</span><span class="token function">git</span> pull origin master                                    <span class="token comment" spellcheck="true"># 获取远程分支master并merge到当前分支</span><span class="token function">git</span> <span class="token function">mv</span> README README2                                     <span class="token comment" spellcheck="true"># 重命名文件README为README2</span><span class="token function">git</span> reset --hard HEAD                                     <span class="token comment" spellcheck="true"># 将当前版本重置为HEAD（通常用于merge失败回退）</span><span class="token function">git</span> rebase<span class="token function">git</span> branch -d hotfixes/BJVEP933                           <span class="token comment" spellcheck="true"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span><span class="token function">git</span> branch -D hotfixes/BJVEP933                           <span class="token comment" spellcheck="true"># 强制删除分支hotfixes/BJVEP933</span><span class="token function">git</span> ls-files                                              <span class="token comment" spellcheck="true"># 列出git index包含的文件</span><span class="token function">git</span> show-branch                                           <span class="token comment" spellcheck="true"># 图示当前分支历史</span><span class="token function">git</span> show-branch --all                                     <span class="token comment" spellcheck="true"># 图示所有分支历史</span><span class="token function">git</span> whatchanged                                           <span class="token comment" spellcheck="true"># 显示提交历史对应的文件修改</span><span class="token function">git</span> revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class="token comment" spellcheck="true"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><span class="token function">git</span> ls-tree HEAD                                          <span class="token comment" spellcheck="true"># 内部命令：显示某个git对象</span><span class="token function">git</span> rev-parse v2.0                                        <span class="token comment" spellcheck="true"># 内部命令：显示某个ref对于的SHA1 HASH</span><span class="token function">git</span> reflog                                                <span class="token comment" spellcheck="true"># 显示所有提交，包括孤立节点</span><span class="token function">git</span> show HEAD@<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;5&amp;#125;</span><span class="token function">git</span> show master@<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;yesterday&amp;#125;                               # 显示master分支昨天的状态</span><span class="token function">git</span> log --pretty<span class="token operator">=</span>format:<span class="token string">'%h %s'</span> --graph                   <span class="token comment" spellcheck="true"># 图示提交日志</span><span class="token function">git</span> show HEAD~3<span class="token function">git</span> show -s --pretty<span class="token operator">=</span>raw 2be7fcb476<span class="token function">git</span> stash                                                 <span class="token comment" spellcheck="true"># 暂存当前修改，将所有至为HEAD状态</span><span class="token function">git</span> stash list                                            <span class="token comment" spellcheck="true"># 查看所有暂存</span><span class="token function">git</span> stash show -p stash@<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;0&amp;#125;                               # 参考第一次暂存</span><span class="token function">git</span> stash apply stash@<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;0&amp;#125;                                 # 应用第一次暂存</span><span class="token function">git</span> <span class="token function">grep</span> <span class="token string">"delete from"</span>                                    <span class="token comment" spellcheck="true"># 文件中搜索文本“delete from”</span><span class="token function">git</span> <span class="token function">grep</span> -e <span class="token string">'#define'</span> --and -e SORT_DIRENT<span class="token function">git</span> gc<span class="token function">git</span> <span class="token function">fsck</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<br><a href="https://www.runoob.com/manual/git-guide/">git - 简明指南</a><br><a href="https://www.runoob.com/w3cnote/git-guide.html">Github 简明教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git配置代理</title>
      <link href="/blog/2024/10/02/git-pei-zhi-dai-li/"/>
      <url>/blog/2024/10/02/git-pei-zhi-dai-li/</url>
      
        <content type="html"><![CDATA[<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token comment" spellcheck="true"># socks5协议，v2ray默认监听10808端口</span>$ <span class="token function">git</span> config –global http.proxy socks5://127.0.0.1:10808$ <span class="token function">git</span> config –global https.proxy socks5://127.0.0.1:10808$ <span class="token comment" spellcheck="true"># http协议，v2ray默认监听10809端口</span>$ <span class="token function">git</span> config –global http.proxy http://127.0.0.1:10809$ <span class="token function">git</span> config –global https.proxy https://127.0.0.1:10809$ <span class="token comment" spellcheck="true"># 查看设置</span>$ <span class="token function">git</span> config -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>如果单独给github配置代理，设置如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 走 socks5 代理</span><span class="token function">git</span> config --global http.https://github.com.proxy <span class="token string">"socks5://127.0.0.1:1080"</span><span class="token comment" spellcheck="true"># 走 http 代理</span><span class="token function">git</span> config --global http.https://github.com.proxy <span class="token string">"http://127.0.0.1:10809"</span><span class="token comment" spellcheck="true"># 取消设置</span><span class="token function">git</span> config --global --unset http.https://github.com.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> proxy http://127.0.0.1:10809<span class="token function">npm</span> config <span class="token keyword">set</span> https-proxy http://127.0.0.1:10809<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考链接：<br><a href="https://www.codeover.cn/proxy-settings/">各常用包管理器配置科学上网代理</a><br><a href="https://igghelper.com/helper/?p=152">使用V2ray对Git进行加速</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo与GitHub搭建个人博客</title>
      <link href="/blog/2024/10/02/ji-yu-hexo-yu-github-da-jian-ge-ren-bo-ke/"/>
      <url>/blog/2024/10/02/ji-yu-hexo-yu-github-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="0-前期准备"><a href="#0-前期准备" class="headerlink" title="0.前期准备"></a>0.前期准备</h2><p>开始之前，请确保已安装以下工具：git、npm<br>在github创建一个仓库：username.github.io<br>在本地建一个同名的目录</p><h2 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.安装hexo"></a>1.安装hexo</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1-初始化"><a href="#1-1-初始化" class="headerlink" title="1.1 初始化"></a>1.1 初始化</h3><p>执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-更改配置"><a href="#1-2-更改配置" class="headerlink" title="1.2 更改配置"></a>1.2 更改配置</h3><p>修改_config.yml:(注意配置的键值之间要有空格)</p><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><table><thead><tr><th align="left">设置</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">网站标题</td></tr><tr><td align="left">subtitle</td><td align="left">网站副标题</td></tr><tr><td align="left">description</td><td align="left">网站描述</td></tr><tr><td align="left">keywords</td><td align="left">网站的关键词。 支持多个关键词。</td></tr><tr><td align="left">author</td><td align="left">您的名字</td></tr><tr><td align="left">language</td><td align="left">网站使用的语言。 使用 2 个字母的 ISO-639-1 代码，或 它的变体。 默认为 en。</td></tr><tr><td align="left">timezone</td><td align="left">网站时区。 Hexo 默认使用您电脑的时区。 请参考 时区列表 进行设置，如 America&#x2F;New_York, Japan, 和 UTC 。 一般的，对于中国大陆地区可以使用</td></tr></tbody></table><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><table><thead><tr><th align="center">设置</th><th align="center">描述</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">网址, 必须以 http:&#x2F;&#x2F; 或 https:&#x2F;&#x2F; 开头</td><td align="center"></td></tr><tr><td align="center">root</td><td align="center">网站根目录url’s pathname</td><td align="center"></td></tr><tr><td align="center">permalink</td><td align="center">文章的 永久链接 格式:year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</td><td align="center"></td></tr><tr><td align="center">permalink_defaults</td><td align="center">永久链接中各部分的默认值</td><td align="center"></td></tr><tr><td align="center">pretty_urls</td><td align="center">改写 permalink 的值来美化 URL</td><td align="center"></td></tr><tr><td align="center">pretty_urls.trailing_index</td><td align="center">是否在永久链接中保留尾部的 index.html，设置为 false 时去除</td><td align="center">true</td></tr><tr><td align="center">pretty_urls.trailing_html</td><td align="center">是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)</td><td align="center">true</td></tr></tbody></table><blockquote><p><strong>网站存放在子目录</strong><br>如果您的网站存放在子目录中，例如 [<a href="http://example.com/blog]">http://example.com/blog]</a> ,则请将您的 url 设为 [<a href="http://example.com/blog]">http://example.com/blog]</a> ,并把 root 设为 &#x2F;blog&#x2F;。</p></blockquote><h3 id="1-3-安装主题"><a href="#1-3-安装主题" class="headerlink" title="1.3 安装主题"></a>1.3 安装主题</h3><p>这里选择的是keep主题。使用git clone：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">git</span> clone https://github.com/XPoet/hexo-theme-keep themes/keep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或使用npm安装：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span> hexo-theme-keep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Keep 主题安装完成后，在 Hexo 配置文件 _config.yml 中将 theme 设置为 keep。<br>更新主题：<br>通过 Git 更新到最新的 master 分支：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>/themes/keep$ <span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或通过 NPM 安装最新版本</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span> hexo-theme-keep@latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>两种方式不要混用</li></ul><h3 id="1-4-写文章"><a href="#1-4-写文章" class="headerlink" title="1.4 写文章"></a>1.4 写文章</h3><p>在<folder>&#x2F;source&#x2F;_posts下创建你的第一个博客吧</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new post <span class="token string">"title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-测试"><a href="#1-5-测试" class="headerlink" title="1.5 测试"></a>1.5 测试</h3><pre class="line-numbers language-bash"><code class="language-bash">hexo server  //hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试服务启动后，可以在浏览器输入localhost:4000进行访问。<br>（本人的网站存放在子目录中，输入localhost:4000&#x2F;blog&#x2F;访问）</p><h2 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h2><h3 id="1-6-安装hexo-deployer-git自动部署发布工具"><a href="#1-6-安装hexo-deployer-git自动部署发布工具" class="headerlink" title="1.6 安装hexo-deployer-git自动部署发布工具"></a>1.6 安装hexo-deployer-git自动部署发布工具</h3><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置_config.yml:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/&lt;username<span class="token punctuation">></span>/&lt;project<span class="token punctuation">></span>  <span class="token comment" spellcheck="true"># example, https://github.com/hexojs/hexojs.github.io</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了将博客放在子目录(即nudoo.github.io&#x2F;blog)下，需要新建一个github仓库(blog)，注意需要是公开的，<br>在 GitHub 仓库的设置中，导航至 Settings &gt; Pages &gt; Source 。 将 source 更改为 GitHub Actions，然后保存。<br>编辑 _config.yml，将 url: 更改为 nudoo.github.io&#x2F;blog<br>Commit 并 push 到默认分支上。（hexo clean &amp; hexo g &amp; hexo d)<br>访问nudoo.github.io&#x2F;blog查看</p><h3 id="1-7-发布"><a href="#1-7-发布" class="headerlink" title="1.7 发布"></a>1.7 发布</h3><p>清除之前生成的东西</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成静态文章</p><pre class="line-numbers language-bash"><code class="language-bash">hexo generate // hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 部署文章</p><pre class="line-numbers language-bash"><code class="language-bash">hexo deploy // hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以写在一起</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>附：</p><h2 id="备份源文件"><a href="#备份源文件" class="headerlink" title="备份源文件"></a>备份源文件</h2><p> hexo deploy只将生成的静态网页文件(public目录)上传到了仓库中，如果想要多个终端同步写作，可以把blog源文件上传到github。<br> 在github仓库新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。<br> 然后git checkout hexo切换到hexo分支，然后git add .，然后git commit -m “xxx”，最后git push origin hexo提交就行了。</p><ul><li>也可以新建一个仓库存放源文件</li></ul><h2 id="宠物"><a href="#宠物" class="headerlink" title="宠物"></a>宠物</h2><p>1、安装live2d插件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、安装模型</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、在配置文件中添加即可</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>shizuku  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
